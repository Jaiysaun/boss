#!/bin/bash
#
#    This file is part of BOSS.
#
#    BOSS is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    BOSS is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with BOSS.  If not, see <http://www.gnu.org/licenses/>.

games=("oblivion" \
       "falloutnv" \
       "skyrim" \
       "fallout3" \
       "nehrim")

template_directory="resources/l10n/"
template_file="boss.pot"

wx_locale_path="../wxWidgets/locale/"
languages=("es" \
           "ru" \
           "zh_CN")
for lang in "${languages[@]}"; do
	language_binaries+=("${template_directory}${lang}/LC_MESSAGES/boss.mo")
	language_files+=("${template_directory}${lang}/LC_MESSAGES/boss.po")
done

function package_archive() {
	local archive_name="boss.zip"
	local file_list=("bin/Release-32/boss.exe" \
	                 "bin/Release-32/boss_gui.exe" \
	                 "data/BOSS.ini" \
	                 "Docs" \
	                 "resources/octokit.js" \
	                 "resources/promise-1.0.0.min.js" \
	                 "resources/style.css" \
	                 "resources/script.js")
	for lang in "${languages[@]}"; do
		cp -u "${wx_locale_path}${lang}.mo" "${template_directory}${lang}/LC_MESSAGES/wxstd.mo"
		language_binaries+=("${template_directory}${lang}/LC_MESSAGES/wxstd.mo")
		echo "Copied ${wx_locale_path}${lang}.mo to ${template_directory}${lang}/LC_MESSAGES/wxstd.mo"
	done
	file_list+=("${language_binaries[@]}")
	# TODO(MCP): Rename the directories for the games in the BOSS directory to be consistent with the repository names

	for game in "${games[@]}"; do
		#game_repos+=("../${game}/.git/config" \
		#             "../${game}/.git/HEAD" \
		#             "../${game}/.git/index" \
		#             "../${game}/.git/packed-refs" \
		#             "../${game}/.git/refs/heads/master" \
		#             "../${game}/.git/refs/remotes/origin/HEAD" \
		#             "../${game}/.git/objects")
		mkdir -p "${game}/.git/" \
		         "${game}/.git/refs/heads/" \
		         "${game}/.git/refs/remotes/origin/" \
		         "${game}/.git/objects"

		cp -ur "../${game}/.git/config" "${game}/.git/config"
		cp -ur "../${game}/.git/HEAD" "${game}/.git/HEAD"
		cp -ur "../${game}/.git/index" "${game}/.git/index"
		cp -ur "../${game}/.git/packed-refs" "${game}/.git/packed-refs"
		cp -ur "../${game}/.git/refs/heads/master" "${game}/.git/refs/heads/master"
		cp -ur "../${game}/.git/refs/remotes/origin/HEAD" "${game}/.git/refs/remotes/origin/HEAD"
		cp -ur "../${game}/.git/objects" "${game}/.git/objects"

		file_list+=("${game}/.git/config" \
		            "${game}/.git/HEAD" \
		            "${game}/.git/index" \
		            "${game}/.git/packed-refs" \
		            "${game}/.git/refs/heads/master" \
		            "${game}/.git/refs/remotes/origin/HEAD" \
		            "${game}/.git/objects")

		echo "${game}'s Git files have been copied."
	done
	zip -r -9 "${archive_name}" "${file_list[@]}"
}

function extract_strings() {
	find src/ -type f \( -name '*.cpp' -or -name '*.h' \) \
	  | xargs xgettext --from-code utf-8 \
	                   --keyword=translate:1,1t \
	                   --keyword=translate:1,2,3t \
	                   --boost \
	                   --indent \
	                   --c++ \
	                   --package-name=BOSS \
	                   --copyright-holder="BOSS Development Team" \
	                   --package-version=2.3.0 \
	                   --output="${template_file}" \
	                   --output-dir="${template_directory}"
	echo "Strings extracted to ${template_directory}${template_file}"
}

function compile_translations(){
	for lang in "${languages[@]}"; do
		msgfmt --output-file="${template_directory}${lang}/LC_MESSAGES/boss.mo" \
		                     "${template_directory}${lang}/LC_MESSAGES/boss.po"
	done
}

function create_new_translation() {
	local locale_choice
	echo -n "Enter locale (format should be ll<_CC>): "
	read locale_choice
	echo ""
	mkdir -p "${template_directory}${locale_choice}"
	msginit --locale="${locale_choice}" \
	        --input="${template_directory}${template_file}" \
	        --output-file="${template_directory}${locale_choice}/boss.po"
}

function update_translations() {
	for lang in "${language_files[@]}"; do
		echo "Udating ${lang}..."
		msgmerge --update \
		         --indent \
		         --previous \
		         --quiet \
		         "${lang}" \
		         "${template_directory}${template_file}"
	done
}

function translation_files_menu() {
	local generate_translation_choice=0
	until [ "$generate_translation_choice" = "3" ]; do
		echo "Generate Translation Files"
		echo "	1) Create New Translation"
		echo "	2) Update Existing Translation"
		echo "	3) Return to Translation Files menu"
		echo "	4) Quit"

		echo -n "Choice: "
		read generate_translation_choice
		echo ""
		case $generate_translation_choice in
			1 \
			  | "Create New Translation" \
			  | "create new translation")
				create_new_translation
				;;
			2 \
			  | "Update Existing Translation" \
			  | "update existing translation")
				update_translations
				;;
			3 \
			  | "Return" \
			  | "return")
				generate_translation_choice=3
				break
				;;
			4 \
			  | "Quit" \
			  | "quit")
				exit
				;;
			*)
				echo "Invalid Option"
				;;
		esac
	done
}

function translation_menu() {
	local translation_choice=0
	until [ "$translation_choice" = "4" ]; do
		echo "Translation Files"
		echo "	1) Extract Strings"
		echo "	2) Generate Translation Files"
		echo "	3) Compile Translation Files"
		echo "	4) Return to Main Menu"
		echo "	5) Quit"

		echo -n "Choice: "
		read translation_choice
		echo ""
		case $translation_choice in
			1 \
			  | "Extract Strings" \
			  | "extract strings")
				# TODO(MCP): Look at replacing some of the values with generated to keep the project consistent?
				extract_strings
				;;
			2 \
			  | "Generate Translation Files" \
			  | "generate translation files")
				translation_files_menu
				;;
			3 \
			  | "Compile Translation Files" \
			  | "compile translation files")
				compile_translations
				;;
			4 \
			  | "Return" \
			  | "return")
				translation_choice=4
				break
				;;
			5 \
			  | "Quit" \
			  | "quit")
				exit
				;;
			*)
				echo "Invalid Option"
				;;
		esac
	done
}

function main() {
	local main_choice=0
	until [ "$main_choice" = "3" ]; do
		echo "Main Menu"
		echo "	1) Package Archive"
		echo "	2) Translation Files"
		echo "	3) Quit"

		echo -n "Choice: "
		read main_choice
		echo ""
		case $main_choice in
			1 \
			  | "Package Archive" \
			  | "package archive")
				package_archive
				;;
			2 \
			  | "Translation Files" \
			  | "translation files")
				translation_menu
				;;
			3 \
			  | "Quit" \
			  | "quit")
				main_choice=3
				exit
				;;
			*)
				echo "Invalid Option"
				;;
		esac
	done
}

main "$@"
